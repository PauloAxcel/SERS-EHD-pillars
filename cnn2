#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 30 15:34:02 2021

@author: alex
"""
import os
import cv2
import random
import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from keras import layers 
from keras import models
from keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from keras import optimizers
from keras.preprocessing.image import ImageDataGenerator

# train_SERS = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Training /SERS/'
# validate_SERS = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Validation /SERS /'
# train_not_SERS = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Training /Not_SERS/'
# validate_not_SERS = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Validation /Not SERS/'
# test_SERS = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Testing /SERS/'
# test_not_SERS = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Testing /Not SERS/'
train = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Training /'
validation = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Validation /'
test = r'/Users/alex/Documents/Chem Eng/Masters Project  /Data /Testing /'
# building the cnn model below 
seq_model= models.Sequential()
seq_model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) 
seq_model.add(layers.MaxPooling2D((2, 2)))
seq_model.add(layers.Conv2D(32, (3, 3), activation='relu')) 
seq_model.add(layers.MaxPooling2D((2, 2)))
seq_model.add(layers.Conv2D(32, (3, 3), activation='relu'))
seq_model.add(layers.Flatten())
seq_model.add(layers.Dropout(0.5))
seq_model.add(layers.Dense(512, activation='relu'))
seq_model.add(layers.Dense(1, activation='sigmoid'))
# can also try softmax above, could also be a 1

seq_model.compile(loss='binary_crossentropy',
              optimizer= optimizers.RMSprop(lr=1e-4),
              metrics=['acc'])

# (train_images, train_labels), (test_images, test_labels) = mnist.load_data()
# train_images = train_images.reshape((60000, 28, 28, 1))
# train_images = train_images.astype('float32') / 255
# test_images = test_images.reshape((10000, 28, 28, 1))
# test_images = test_images.astype('float32') / 255
# train_labels = to_categorical(train_labels)
# test_labels = to_categorical(test_labels)
# seq_model.compile(optimizer='rmsprop',
#               loss='binary_crossentropy',
# #               metrics=['accuracy'])
# seq_model.summary()
# seq_model.fit((train_SERS, train_not_SERS), train_labels, epochs=5, batch_size=64)


# train_SERS_data = os.listdir(train_SERS)
# validate_SERS_data = os.listdir(validate_SERS)
# train_not_SERS_data = os.listdir(train_not_SERS)
# validate_not_SERS_data = os.listdir(validate_not_SERS)
# test_SERS_data = os.listdir(test_SERS)
# test_not_SERS_data = os.listdir(test_not_SERS)

train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)
validate_datagen = ImageDataGenerator(rescale=1./255)

# train_datagen = ImageDataGenerator(rescale=1./255, rotation_range=40, width_shift_range=0.2,
#     height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True,)


train_generator = train_datagen.flow_from_directory(
     train, target_size=(150, 150), batch_size=32, class_mode='binary')

validation_generator = validate_datagen.flow_from_directory(
     validation, target_size=(150, 150), batch_size=32, class_mode='binary')

history = seq_model.fit(train_generator, steps_per_epoch=100, epochs=5,
                                  validation_data = validation_generator, validation_steps=50)

seq_model.save('SERScnn')
